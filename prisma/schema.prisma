generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  password       String
  name           String?
  firstName      String
  lastName       String
  phone          String?
  role           Role          @default(CUSTOMER)
  expertise      String?
  address        Address?
  assignedOrders Order[]       @relation("AssignedOrders")
  orders         Order[]       @relation("UserOrders")
  siteSettings   SiteSettings?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  postcode  String
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                 String         @id @default(cuid())
  userId             String
  user               User           @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  assignedEngineerId String?
  assignedEngineer   User?          @relation("AssignedOrders", fields: [assignedEngineerId], references: [id])
  status             OrderStatus    @default(PENDING)
  paymentStatus      PaymentStatus  @default(UNPAID)
  paymentMethod      PaymentMethod  @default(CREDIT_CARD)
  parkingOptions     ParkingOptions @default(NO)
  isCongestionZone   Boolean
  timeSlotId         String
  timeSlot           TimeSlot       @relation(fields: [timeSlotId], references: [id])
  date               DateTime
  orderNotes         String?
  totalPrice         Float
  invoice            String         @unique
  propertyType       PropertyType
  cartItems          CartItem[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model TimeSlot {
  id              String   @id @default(cuid())
  date            DateTime
  startTime       DateTime
  endTime         DateTime
  slotType        SlotType
  maxCapacity     Int      @default(4) // Maximum number of bookings allowed
  currentBookings Int      @default(0) // Current number of bookings
  isAvailable     Boolean  @default(true) // Will be false when currentBookings >= maxCapacity
  orders          Order[] // Changed to allow multiple orders
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([date, slotType])
  @@index([date, currentBookings, isAvailable])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @default(5)
  title     String
  userName  String
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Package {
  id                  String          @id @default(cuid())
  name                String
  description         String?
  category            PackageCategory
  serviceName         String
  type                PackageType?
  propertyType        PropertyType
  unitType            String?
  price               Float
  isAdditionalPackage Boolean         @default(false)
  extraUnitPrice      Float?          @default(0)
  minQuantity         Int?            @default(0)
  priceType           PriceType       @default(FIXED)
  cartItems           CartItem[] // Add this new relation
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  packageId String
  package   Package  @relation(fields: [packageId], references: [id])
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([packageId])
}

model SiteSettings {
  id              String            @id @default(cuid())
  email           String?
  phone1          String?
  phone2          String?
  whatsapp        String?
  websiteUrl      String?
  facebookUrl     String?
  twitterUrl      String?
  instagramUrl    String?
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id])
  openingDateTime OpeningDateTime[]
  updatedAt       DateTime          @updatedAt
}

model OpeningDateTime {
  id             String       @id @default(cuid())
  dayOfWeek      DayOfWeek
  openingTime    String
  closingTime    String
  siteSettingsId String
  siteSettings   SiteSettings @relation(fields: [siteSettingsId], references: [id], onDelete: Cascade)
}

enum SlotType {
  MORNING   @map("8AM-12PM")
  AFTERNOON @map("12PM-4PM")
  EVENING   @map("4PM-8PM")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
  NOT_APPLICABLE
  HMO
  COMMUNAL_AREA
  BUSINESS_SECTOR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  CASH_TO_ENGINEER
  BANK_TRANSFER
}

enum ParkingOptions {
  PAID
  FREE
  NO
}

enum PackageCategory {
  ELECTRICAL
  FIRE
  GAS
  HEALTH_SAFETY
  PROPERTY_MANAGEMENT
}

enum PackageType {
  CERTIFICATE
  REPAIR
  INSTALLATION
  INSPECTION
  OTHER
}

enum PriceType {
  FIXED
  FROM
  RANGE
}
